# Generated from C_Grammar.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\28")
        buf.write("\u0157\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:")
        buf.write("\4;\t;\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3")
        buf.write("\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3")
        buf.write("\t\3\t\3\n\3\n\3\13\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r")
        buf.write("\3\16\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\21\3\22")
        buf.write("\3\22\3\22\3\23\3\23\3\24\3\24\3\25\3\25\3\25\3\26\3\26")
        buf.write("\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33")
        buf.write("\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\36\3\37\3\37\3\37")
        buf.write("\3 \3 \3 \3!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3#\3#\3#")
        buf.write("\3#\3#\3#\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3&\3&\3&\3&\3")
        buf.write("&\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3)\3)\3")
        buf.write(")\3*\3*\3*\3*\3*\3*\3*\3*\3+\3+\3+\3+\3+\3,\3,\3,\3,\3")
        buf.write(",\3,\3-\3-\3-\3-\3.\3.\3.\3.\3.\3.\3.\3/\3/\3/\3/\3/\3")
        buf.write("/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\61\6")
        buf.write("\61\u012a\n\61\r\61\16\61\u012b\3\62\3\62\3\62\7\62\u0131")
        buf.write("\n\62\f\62\16\62\u0134\13\62\3\63\3\63\5\63\u0138\n\63")
        buf.write("\3\64\3\64\3\65\3\65\3\66\3\66\3\67\3\67\38\68\u0143\n")
        buf.write("8\r8\168\u0144\38\38\68\u0149\n8\r8\168\u014a\39\39\3")
        buf.write(":\3:\3;\6;\u0152\n;\r;\16;\u0153\3;\3;\2\2<\3\3\5\4\7")
        buf.write("\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17")
        buf.write("\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63")
        buf.write("\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-")
        buf.write("Y.[/]\60_\61a\62c\63e\64g\2i\2k\2m\2o\65q\66s\67u8\3\2")
        buf.write("\5\5\2C\\aac|\3\2\62;\5\2\13\f\17\17\"\"\2\u0159\2\3\3")
        buf.write("\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2")
        buf.write("\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2")
        buf.write("\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2")
        buf.write("\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2")
        buf.write("\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3")
        buf.write("\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2")
        buf.write("\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3")
        buf.write("\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K")
        buf.write("\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2")
        buf.write("U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2")
        buf.write("\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2o\3\2\2")
        buf.write("\2\2q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\3w\3\2\2\2\5\u0082")
        buf.write("\3\2\2\2\7\u0086\3\2\2\2\t\u0088\3\2\2\2\13\u008a\3\2")
        buf.write("\2\2\r\u008c\3\2\2\2\17\u008e\3\2\2\2\21\u0090\3\2\2\2")
        buf.write("\23\u0092\3\2\2\2\25\u0094\3\2\2\2\27\u0097\3\2\2\2\31")
        buf.write("\u009a\3\2\2\2\33\u009d\3\2\2\2\35\u00a0\3\2\2\2\37\u00a2")
        buf.write("\3\2\2\2!\u00a4\3\2\2\2#\u00a7\3\2\2\2%\u00aa\3\2\2\2")
        buf.write("\'\u00ac\3\2\2\2)\u00ae\3\2\2\2+\u00b1\3\2\2\2-\u00b4")
        buf.write("\3\2\2\2/\u00b6\3\2\2\2\61\u00b8\3\2\2\2\63\u00ba\3\2")
        buf.write("\2\2\65\u00bc\3\2\2\2\67\u00bf\3\2\2\29\u00c1\3\2\2\2")
        buf.write(";\u00c3\3\2\2\2=\u00c6\3\2\2\2?\u00c9\3\2\2\2A\u00cc\3")
        buf.write("\2\2\2C\u00d1\3\2\2\2E\u00d6\3\2\2\2G\u00dc\3\2\2\2I\u00e2")
        buf.write("\3\2\2\2K\u00e6\3\2\2\2M\u00eb\3\2\2\2O\u00f1\3\2\2\2")
        buf.write("Q\u00f8\3\2\2\2S\u00fb\3\2\2\2U\u0103\3\2\2\2W\u0108\3")
        buf.write("\2\2\2Y\u010e\3\2\2\2[\u0112\3\2\2\2]\u0119\3\2\2\2_\u011f")
        buf.write("\3\2\2\2a\u0129\3\2\2\2c\u012d\3\2\2\2e\u0137\3\2\2\2")
        buf.write("g\u0139\3\2\2\2i\u013b\3\2\2\2k\u013d\3\2\2\2m\u013f\3")
        buf.write("\2\2\2o\u0142\3\2\2\2q\u014c\3\2\2\2s\u014e\3\2\2\2u\u0151")
        buf.write("\3\2\2\2wx\7%\2\2xy\7k\2\2yz\7p\2\2z{\7e\2\2{|\7n\2\2")
        buf.write("|}\7w\2\2}~\7f\2\2~\177\7g\2\2\177\u0080\7\"\2\2\u0080")
        buf.write("\u0081\7>\2\2\u0081\4\3\2\2\2\u0082\u0083\7\60\2\2\u0083")
        buf.write("\u0084\7j\2\2\u0084\u0085\7@\2\2\u0085\6\3\2\2\2\u0086")
        buf.write("\u0087\7=\2\2\u0087\b\3\2\2\2\u0088\u0089\7.\2\2\u0089")
        buf.write("\n\3\2\2\2\u008a\u008b\7?\2\2\u008b\f\3\2\2\2\u008c\u008d")
        buf.write("\7]\2\2\u008d\16\3\2\2\2\u008e\u008f\7_\2\2\u008f\20\3")
        buf.write("\2\2\2\u0090\u0091\7*\2\2\u0091\22\3\2\2\2\u0092\u0093")
        buf.write("\7+\2\2\u0093\24\3\2\2\2\u0094\u0095\7-\2\2\u0095\u0096")
        buf.write("\7?\2\2\u0096\26\3\2\2\2\u0097\u0098\7/\2\2\u0098\u0099")
        buf.write("\7?\2\2\u0099\30\3\2\2\2\u009a\u009b\7,\2\2\u009b\u009c")
        buf.write("\7?\2\2\u009c\32\3\2\2\2\u009d\u009e\7\61\2\2\u009e\u009f")
        buf.write("\7?\2\2\u009f\34\3\2\2\2\u00a0\u00a1\7}\2\2\u00a1\36\3")
        buf.write("\2\2\2\u00a2\u00a3\7\177\2\2\u00a3 \3\2\2\2\u00a4\u00a5")
        buf.write("\7-\2\2\u00a5\u00a6\7-\2\2\u00a6\"\3\2\2\2\u00a7\u00a8")
        buf.write("\7/\2\2\u00a8\u00a9\7/\2\2\u00a9$\3\2\2\2\u00aa\u00ab")
        buf.write("\7#\2\2\u00ab&\3\2\2\2\u00ac\u00ad\7/\2\2\u00ad(\3\2\2")
        buf.write("\2\u00ae\u00af\7~\2\2\u00af\u00b0\7~\2\2\u00b0*\3\2\2")
        buf.write("\2\u00b1\u00b2\7(\2\2\u00b2\u00b3\7(\2\2\u00b3,\3\2\2")
        buf.write("\2\u00b4\u00b5\7,\2\2\u00b5.\3\2\2\2\u00b6\u00b7\7-\2")
        buf.write("\2\u00b7\60\3\2\2\2\u00b8\u00b9\7\61\2\2\u00b9\62\3\2")
        buf.write("\2\2\u00ba\u00bb\7\'\2\2\u00bb\64\3\2\2\2\u00bc\u00bd")
        buf.write("\7?\2\2\u00bd\u00be\7?\2\2\u00be\66\3\2\2\2\u00bf\u00c0")
        buf.write("\7@\2\2\u00c08\3\2\2\2\u00c1\u00c2\7>\2\2\u00c2:\3\2\2")
        buf.write("\2\u00c3\u00c4\7>\2\2\u00c4\u00c5\7?\2\2\u00c5<\3\2\2")
        buf.write("\2\u00c6\u00c7\7@\2\2\u00c7\u00c8\7?\2\2\u00c8>\3\2\2")
        buf.write("\2\u00c9\u00ca\7#\2\2\u00ca\u00cb\7?\2\2\u00cb@\3\2\2")
        buf.write("\2\u00cc\u00cd\7x\2\2\u00cd\u00ce\7q\2\2\u00ce\u00cf\7")
        buf.write("k\2\2\u00cf\u00d0\7f\2\2\u00d0B\3\2\2\2\u00d1\u00d2\7")
        buf.write("e\2\2\u00d2\u00d3\7j\2\2\u00d3\u00d4\7c\2\2\u00d4\u00d5")
        buf.write("\7t\2\2\u00d5D\3\2\2\2\u00d6\u00d7\7e\2\2\u00d7\u00d8")
        buf.write("\7j\2\2\u00d8\u00d9\7c\2\2\u00d9\u00da\7t\2\2\u00da\u00db")
        buf.write("\7,\2\2\u00dbF\3\2\2\2\u00dc\u00dd\7u\2\2\u00dd\u00de")
        buf.write("\7j\2\2\u00de\u00df\7q\2\2\u00df\u00e0\7t\2\2\u00e0\u00e1")
        buf.write("\7v\2\2\u00e1H\3\2\2\2\u00e2\u00e3\7k\2\2\u00e3\u00e4")
        buf.write("\7p\2\2\u00e4\u00e5\7v\2\2\u00e5J\3\2\2\2\u00e6\u00e7")
        buf.write("\7n\2\2\u00e7\u00e8\7q\2\2\u00e8\u00e9\7p\2\2\u00e9\u00ea")
        buf.write("\7i\2\2\u00eaL\3\2\2\2\u00eb\u00ec\7h\2\2\u00ec\u00ed")
        buf.write("\7n\2\2\u00ed\u00ee\7q\2\2\u00ee\u00ef\7c\2\2\u00ef\u00f0")
        buf.write("\7v\2\2\u00f0N\3\2\2\2\u00f1\u00f2\7f\2\2\u00f2\u00f3")
        buf.write("\7q\2\2\u00f3\u00f4\7w\2\2\u00f4\u00f5\7d\2\2\u00f5\u00f6")
        buf.write("\7n\2\2\u00f6\u00f7\7g\2\2\u00f7P\3\2\2\2\u00f8\u00f9")
        buf.write("\7k\2\2\u00f9\u00fa\7h\2\2\u00faR\3\2\2\2\u00fb\u00fc")
        buf.write("\7g\2\2\u00fc\u00fd\7n\2\2\u00fd\u00fe\7u\2\2\u00fe\u00ff")
        buf.write("\7g\2\2\u00ff\u0100\7\"\2\2\u0100\u0101\7k\2\2\u0101\u0102")
        buf.write("\7h\2\2\u0102T\3\2\2\2\u0103\u0104\7g\2\2\u0104\u0105")
        buf.write("\7n\2\2\u0105\u0106\7u\2\2\u0106\u0107\7g\2\2\u0107V\3")
        buf.write("\2\2\2\u0108\u0109\7y\2\2\u0109\u010a\7j\2\2\u010a\u010b")
        buf.write("\7k\2\2\u010b\u010c\7n\2\2\u010c\u010d\7g\2\2\u010dX\3")
        buf.write("\2\2\2\u010e\u010f\7h\2\2\u010f\u0110\7q\2\2\u0110\u0111")
        buf.write("\7t\2\2\u0111Z\3\2\2\2\u0112\u0113\7t\2\2\u0113\u0114")
        buf.write("\7g\2\2\u0114\u0115\7v\2\2\u0115\u0116\7w\2\2\u0116\u0117")
        buf.write("\7t\2\2\u0117\u0118\7p\2\2\u0118\\\3\2\2\2\u0119\u011a")
        buf.write("\7d\2\2\u011a\u011b\7t\2\2\u011b\u011c\7g\2\2\u011c\u011d")
        buf.write("\7c\2\2\u011d\u011e\7m\2\2\u011e^\3\2\2\2\u011f\u0120")
        buf.write("\7e\2\2\u0120\u0121\7q\2\2\u0121\u0122\7p\2\2\u0122\u0123")
        buf.write("\7v\2\2\u0123\u0124\7k\2\2\u0124\u0125\7p\2\2\u0125\u0126")
        buf.write("\7w\2\2\u0126\u0127\7g\2\2\u0127`\3\2\2\2\u0128\u012a")
        buf.write("\5m\67\2\u0129\u0128\3\2\2\2\u012a\u012b\3\2\2\2\u012b")
        buf.write("\u0129\3\2\2\2\u012b\u012c\3\2\2\2\u012cb\3\2\2\2\u012d")
        buf.write("\u0132\5g\64\2\u012e\u0131\5i\65\2\u012f\u0131\5g\64\2")
        buf.write("\u0130\u012e\3\2\2\2\u0130\u012f\3\2\2\2\u0131\u0134\3")
        buf.write("\2\2\2\u0132\u0130\3\2\2\2\u0132\u0133\3\2\2\2\u0133d")
        buf.write("\3\2\2\2\u0134\u0132\3\2\2\2\u0135\u0138\5m\67\2\u0136")
        buf.write("\u0138\5k\66\2\u0137\u0135\3\2\2\2\u0137\u0136\3\2\2\2")
        buf.write("\u0138f\3\2\2\2\u0139\u013a\5k\66\2\u013ah\3\2\2\2\u013b")
        buf.write("\u013c\5m\67\2\u013cj\3\2\2\2\u013d\u013e\t\2\2\2\u013e")
        buf.write("l\3\2\2\2\u013f\u0140\t\3\2\2\u0140n\3\2\2\2\u0141\u0143")
        buf.write("\5i\65\2\u0142\u0141\3\2\2\2\u0143\u0144\3\2\2\2\u0144")
        buf.write("\u0142\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0146\3\2\2\2")
        buf.write("\u0146\u0148\7\60\2\2\u0147\u0149\5i\65\2\u0148\u0147")
        buf.write("\3\2\2\2\u0149\u014a\3\2\2\2\u014a\u0148\3\2\2\2\u014a")
        buf.write("\u014b\3\2\2\2\u014bp\3\2\2\2\u014c\u014d\7)\2\2\u014d")
        buf.write("r\3\2\2\2\u014e\u014f\7$\2\2\u014ft\3\2\2\2\u0150\u0152")
        buf.write("\t\4\2\2\u0151\u0150\3\2\2\2\u0152\u0153\3\2\2\2\u0153")
        buf.write("\u0151\3\2\2\2\u0153\u0154\3\2\2\2\u0154\u0155\3\2\2\2")
        buf.write("\u0155\u0156\b;\2\2\u0156v\3\2\2\2\n\2\u012b\u0130\u0132")
        buf.write("\u0137\u0144\u014a\u0153\3\b\2\2")
        return buf.getvalue()


class C_GrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    Number = 48
    Identifier = 49
    Char = 50
    FloatNumber = 51
    Apostrophe = 52
    Quotes = 53
    Whitespace = 54

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'#include <'", "'.h>'", "';'", "','", "'='", "'['", "']'", 
            "'('", "')'", "'+='", "'-='", "'*='", "'/='", "'{'", "'}'", 
            "'++'", "'--'", "'!'", "'-'", "'||'", "'&&'", "'*'", "'+'", 
            "'/'", "'%'", "'=='", "'>'", "'<'", "'<='", "'>='", "'!='", 
            "'void'", "'char'", "'char*'", "'short'", "'int'", "'long'", 
            "'float'", "'double'", "'if'", "'else if'", "'else'", "'while'", 
            "'for'", "'return'", "'break'", "'continue'", "'''", "'\"'" ]

    symbolicNames = [ "<INVALID>",
            "Number", "Identifier", "Char", "FloatNumber", "Apostrophe", 
            "Quotes", "Whitespace" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", 
                  "T__44", "T__45", "T__46", "Number", "Identifier", "Char", 
                  "IdentNondigit", "IdentDigit", "Nondigit", "Digit", "FloatNumber", 
                  "Apostrophe", "Quotes", "Whitespace" ]

    grammarFileName = "C_Grammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


